#!/usr/bin/env python

import argparse
import os

from matplotlib import use
use('agg')

import gravityspy.ML.train_classifier as train_classifier

# Definite Command line arguments here

def parse_commandline():
    """Parse the options given on the command-line.
    """
    parser = argparse.ArgumentParser(description=
       "An examples commandline of how to obtain a model is given below: "
       "THEANO_FLAGS=mode=FAST_RUN,device=cuda,floatX=float32 trainmodel "
       "--path-to-trainingset='somedir' --number-of-classes='somenum'")
    parser.add_argument("--path-to-trainingset",
                        help="folder where labeled images live", required=True)
    parser.add_argument("--number-of-classes", type=int,
                        help="How many classes do you have", required=True)
    parser.add_argument("--path-to-pickle",
                        help="folder where the entire pickled training set "
                             "will live. This pickle file should be read in "
                             "by pandas", default='pickeleddata')
    parser.add_argument("--path-to-trained-model",
                        help="folder where the final trained model will go.",
                        default='model')
    parser.add_argument("--batch-size", type=int, default=30,
                        help="defines the batch size, 30 is a reasonable size")
    parser.add_argument("--nb-epoch", type=int, default=20,
                        help="defines the number of iterations, "
                        "130 is reasonable. You can set it to 100 or below, "
                        "if you have time concern for training.")
    parser.add_argument("--fraction-validation", type=float, default=0.125,
                        help="Perentage of trianing set to save for validation")
    parser.add_argument("--fraction-testing", type=float, default=0,
                        help="Percentage of training set to save for testing")
    parser.add_argument("--randomseed", type=int, default=1986,
                        help="Set random seed")
    parser.add_argument("--verbose", action="store_true", default=False,
                        help="Run in Verbose Mode")
    args = parser.parse_args()

    return args

# Parse commandline
args = parse_commandline()

# Pixelate and pickle the traiing set images
train_classifier.pickle_trainingset(
    path_to_trainingset=args.path_to_trainingset,
    save_address=args.path_to_pickle,
    verbose=args.verbose
    )

# Check if teting percentage is 0, set to None
if not args.fraction_testing:
    fraction_testing = None
else:
    fraction_testing = args.fraction_testing

# Train model
train_classifier.make_model(
    data=os.path.join(args.path_to_pickle, 'trainingset.pkl'),
    model_folder=args.path_to_trained_model,
    batch_size=args.batch_size,
    nb_epoch=args.nb_epoch,
    nb_classes=args.number_of_classes,
    fraction_validation=args.fraction_validation,
    fraction_testing=fraction_testing,
    best_model_based_validset=0,
    image_size=[140, 170],
    random_seed=args.randomseed,
    verbose=True
    )
