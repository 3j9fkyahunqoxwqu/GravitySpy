
__author__ = 'Michael Coughlin <michael.coughlin@ligo.org>'

import os, sys, glob
import optparse

from sqlalchemy.engine import create_engine
import pandas as pd
import pdb

import pyomega.ML.make_pickle_for_linux as make_pickle
import pyomega.ML.labelling_test_glitches as label_glitches
import pyomega.ML.train_classifier as train_classifier

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("-o", "--output_path", help="Output path.", default="../output")
    parser.add_option("-i", "--image_path", help="Path to images.", default="../../../../TrainingSet2/H1L1")
    parser.add_option("-m","--model_path", help="Path to model.",default="../pyomega/ML/trained_model/")
    parser.add_option("-s","--GravitySpyIDs", help="Gravity Spy ids.",default="plLyoCA39j,YnmFf1IIxJ,zdFH0CZ4Nq,xHNQxuwpvE")

    parser.add_option("-b", "--database", help="Database (O1GlitchClassification,classification,glitches).", default="glitches")
    parser.add_option("-w", "--userhome-H1", help="Path to your user directory on Hanford", default="/home/michael.coughlin/")
    parser.add_option("-l", "--userhome-L1", help="Path to your user directory on Livingston", default="/home/mcoughlin/")

    opts, args = parser.parse_args()

    return opts

def score_images(dataset_path,pickle_path,model_path,label_path):
    make_pickle.main(dataset_path,pickle_path,1,1)
    scores = label_glitches.label_glitches(pickle_path,model_path,label_path,0)
    return scores

def get_images(image_path,GravitySpyIDs):

    imagepaths = []
    image_path_dirs = glob.glob(os.path.join(image_path,"*"))
    for image_path_dir in image_path_dirs:
        for GravitySpyID in GravitySpyIDs: 
            image_path_images = glob.glob(os.path.join(image_path_dir,"*_%s_*"%GravitySpyID))
            for image_path_image in image_path_images:
                imagepaths.append(image_path_image)
    return imagepaths

############################################################################
###############          MAIN        #######################################
############################################################################

# Parse commandline arguments
opts = parse_commandline()

database = opts.database

outputfolder = opts.output_path
image_path = opts.image_path
model_path = opts.model_path
GravitySpyIDs = opts.GravitySpyIDs.split(",")

#imagepaths = get_images(image_path,GravitySpyIDs)
#for imagepath in imagepaths:
#    os.system("cp %s %s"%(imagepath,datafolder))

if not os.path.isdir(outputfolder):
    os.mkdir(outputfolder)
datafolder = "%s/data"%outputfolder
if not os.path.isdir(datafolder):
    os.mkdir(datafolder)
picklefolder = "%s/pickle"%outputfolder
if not os.path.isdir(picklefolder):
    os.mkdir(picklefolder)
labelfolder = "%s/label"%outputfolder
if not os.path.isdir(labelfolder):
    os.mkdir(labelfolder)

engine = create_engine('postgresql://{0}:{1}@gravityspy.ciera.northwestern.edu:5432/gravityspy'.format(os.environ['QUEST_SQL_USER'],os.environ['QUEST_SQL_PASSWORD']))
tmp = pd.read_sql(database,engine)

H1file = 'filenames_H1.txt'
L1file = 'filenames_L1.txt'

fid1 = open('%s/%s'%(outputfolder,H1file),'w')
fid2 = open('%s/%s'%(outputfolder,L1file),'w')

for GravitySpyID in GravitySpyIDs:
    tmp2 = tmp.loc[tmp.uniqueID == GravitySpyID]
    if len(tmp2) == 0:
        print "Missing %s... continuing."%GravitySpyID
        continue

    ifo = tmp2.iloc[0]['ifo']  
    filenames = [tmp2.iloc[0]['Filename1'],tmp2.iloc[0]['Filename2'],tmp2.iloc[0]['Filename3'],tmp2.iloc[0]['Filename4']]

    for filename in filenames:
        filename = filename.replace("pubic_html","public_html")
        if ifo == "H1":
            fid1.write("%s\n"%filename)
        elif ifo == "L1":
            fid2.write("%s\n"%filename)
fid1.close()
fid2.close()
     
hostpath = "ldas-pcdev2.ligo-wa.caltech.edu"
userpath = "{0}".format(opts.userhome_H1)

os.system("gsiscp {0}/{1} {2}:{3}".format(outputfolder,H1file,hostpath,userpath))
os.system("gsissh {0} 'tar -cz --file=H1.tar.gz --files-from={1}'".format(hostpath,H1file))
os.system("gsiscp {0}:{1}/H1.tar.gz .".format(hostpath,userpath))
os.system("tar -xzf H1.tar.gz")
os.system("find home/ -name '*.png' -exec mv {} %s \;"%datafolder)
os.system("rm -rf H1.tar.gz home/")

hostpath = "ldas-pcdev2.ligo-la.caltech.edu"
userpath = "{0}".format(opts.userhome_L1)

os.system("gsiscp {0}/{1} {2}:{3}".format(outputfolder,L1file,hostpath,userpath))
os.system("gsissh {0} 'tar -cz --file=L1.tar.gz --files-from={1}'".format(hostpath,L1file))
os.system("gsiscp {0}:{1}/L1.tar.gz .".format(hostpath,userpath))
os.system("tar -xzf L1.tar.gz")
os.system("find home/ -name '*.png' -exec mv {} %s \;"%datafolder)
os.system("rm -rf L1.tar.gz home/")

scores = score_images(outputfolder,picklefolder,model_path,labelfolder)
fid = open('%s/triggers.txt'%outputfolder,'w')
for trigger in scores:
    fid.write('%s\n'%' '.join(trigger))
fid.close()


